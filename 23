class Solution {
public:
    ListNode* merge2lists(ListNode* l1, ListNode* l2) {
        ListNode* dummy = new ListNode(-1);
        ListNode* cur = dummy;
        while(l1 != 0 && l2 != 0) {
            if(l1->val < l2->val) {
                cur->next = l1;
                l1 = l1->next;
                cur = cur->next;
            } else {
                cur->next = l2;
                l2 = l2->next;
                cur = cur->next;
            }
        }
        if(l1 != nullptr) {
            cur->next = l1;
        } else if(l2 != nullptr) {
            cur->next = l2;
        }
        return dummy->next;
    }
    ListNode* merge(vector<ListNode*>& lists, int left, int right) {
        if(left == right) return lists[left];
        if(left > right) return nullptr;
        int mid = left + (right - left)/2; 
        ListNode* l1 = merge(lists, left, mid);
        ListNode* l2 = merge(lists, mid + 1, right);
        return merge2lists(l1,l2);
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        return merge(lists, 0, lists.size() - 1);
    }
};
