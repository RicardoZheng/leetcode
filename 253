//上下车法，或叫插旗法
class Solution {
public:
    int minMeetingRooms(vector<vector<int>>& intervals) {
        map<int, int> mp;
        int res = 0;
        for(auto t : intervals) {
            mp[t[0]]++;
            mp[t[1]]--;
        }
        int sum = 0;
        for(auto t: mp) {
            sum = sum + t.second;
            res = max(sum, res);
        }
        return res;
    }
};
//这个插旗法太巧妙了，每次进入一个区间则给该区间加一个旗子，相当于在平地上磊台阶，每次进入一个相同的区域，
//则加一阶台阶，每次出了一个会议室则减少一个台阶。最少使用的房间数，就是台阶的最大高度。并且通过同一个位置的加台阶和减少台阶，可以实现边界处的处理。
