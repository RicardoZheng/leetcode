/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<int, int> mp;
    TreeNode* build(vector<int>& preorder, vector<int>& inorder, int preleft, int preright, int inleft, int inright) {
        if((preleft > preright) || (inleft > inright)) {
            return nullptr;
        }

        TreeNode* root = new TreeNode(preorder[preleft]);
        int in_root_index = mp[preorder[preleft]];
        int left_size = in_root_index - inleft; 
        root -> left = build(preorder, inorder, preleft + 1, preleft + left_size, inleft, in_root_index - 1);
        root -> right = build(preorder, inorder, preleft + left_size + 1, preright, in_root_index + 1, inright);
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n = preorder.size();
        for(int i = 0; i < n; i++) {
            mp[inorder[i]] = i;
        }
        return build(preorder, inorder, 0, n - 1, 0, n - 1);
    }
};
