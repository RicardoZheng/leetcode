class Solution {
public:
    vector<vector<int>> result;//用于存放所有结果 
    vector<int> path;//已经走过的路径
    void backtracking (vector<int>& nums, vector<bool>& used) {
        // 触发结束条件，此时说明找到了一组，将结果放入result中
        if (path.size() == nums.size()) {
            result.push_back(path);
            return;
        }
        for (int i = 0; i < nums.size(); i++) {
            if (used[i] == true) continue; // path里已经收录的元素，直接跳过
            //做选择
            used[i] = true;
            path.push_back(nums[i]);//该数没用过，做选择
            //回溯函数
            backtracking(nums, used);
            //回撤选择
            path.pop_back();
            used[i] = false;
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        vector<bool> used(nums.size(), false);//used初始化为nums。size个元素，值全部为false
        backtracking(nums, used);
        return result;
    }
};
