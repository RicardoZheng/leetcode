class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        //假设每一个数组的值i就是要去的下一个节点nums[i]
        int fast = 0, slow = 0;
        while(true){
            fast = nums[nums[fast]];//快的走两步
            slow = nums[slow];
            if(fast == slow)
                break;
        }
        int finder = 0;
        while(true){
            finder = nums[finder];
            fast = nums[fast];
            if(fast == finder)
                break;        
        }
        return finder;
    }
};
// Floyed 判圈算法：我们先设置慢指针 slow 和快指针 fast ，慢指针每次走一步，快指针每次走两步，
//根据「Floyd 判圈算法」两个指针在有环的情况下一定会相遇，此时我们再将 slow 放置起点 0，两个指针每次同时移动一步，相遇的点就是答案。

适用于判断图，判断环路，有且只有一个环的情况。
图中有且只有一个点存在两个入度为 1，其他入度均为 0。

