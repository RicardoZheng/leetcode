请实现一个函数按照之字形顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。

 

例如:
给定二叉树: [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7

返回其层次遍历结果：

[
  [3],
  [20,9],
  [15,7]
]

class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        queue<TreeNode*> q;
        vector<vector<int>> res;
        if(root !=nullptr){
            q.push(root);
        }
        while(!q.empty()){
            TreeNode* curr;
            vector<int> temp;
            int count = q.size();
            for(int i=0;i<count;i++){
            //for (int i = q.size() - 1; i >= 0; --i){
                curr = q.front();
                q.pop();

                if(curr->left != nullptr){
                    q.push(curr->left);
                }
                if(curr->right != nullptr){
                    q.push(curr->right);
                }

                temp.push_back(curr->val); 
            }
            if(res.size() & 1){
                reverse(temp.begin(), temp.end());
            }
            res.emplace_back(temp);
        }
        return res;
    }
};
